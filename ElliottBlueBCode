

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@Autonomous(name = "Timed Mecanum Complete", group = "Autonomous")
public class BlueAlliancePosB extends LinearOpMode {
    private DcMotor frontLeft;
    private DcMotor frontRight;
    private DcMotor backLeft;
    private DcMotor backRight;

    @Override
    public void runOpMode() {
        frontLeft  = hardwareMap.get(DcMotor.class, "LF");
        frontRight = hardwareMap.get(DcMotor.class, "RF");
        backLeft   = hardwareMap.get(DcMotor.class, "LB");
        backRight  = hardwareMap.get(DcMotor.class, "RB");

        frontLeft.setDirection(DcMotor.Direction.REVERSE);
        backLeft.setDirection(DcMotor.Direction.REVERSE);
        frontRight.setDirection(DcMotor.Direction.FORWARD);
        backRight.setDirection(DcMotor.Direction.FORWARD);

        setAllDrivePower(0.0);

        waitForStart();
        if (!opModeIsActive()) return;

        final double drivePower = 0.6;
        final double turnPower  = 0.5;
        final long sixFeetMs    = 3200;
        final long turn45Ms     = 700;

        mecanumDriveTimed(drivePower, 0.0, 0.0, sixFeetMs);
        mecanumDriveTimed(0.0, 0.0, -turnPower, turn45Ms);
        waitMillis(3000);
        mecanumDriveTimed(-drivePower, 0.0, 0.0, sixFeetMs);
        waitMillis(3000);
        mecanumDriveTimed(drivePower, 0.0, 0.0, sixFeetMs);

        setAllDrivePower(0.0);
    }

    private void mecanumDriveTimed(double forward, double strafe, double rotate, long durationMs) {
        double fl = forward + strafe + rotate;
        double fr = forward - strafe - rotate;
        double bl = forward - strafe + rotate;
        double br = forward + strafe - rotate;

        double max = Math.max(1.0, Math.max(Math.abs(fl), Math.max(Math.abs(fr), Math.max(Math.abs(bl), Math.abs(br)))));
        fl /= max; fr /= max; bl /= max; br /= max;

        frontLeft.setPower(fl);
        frontRight.setPower(fr);
        backLeft.setPower(bl);
        backRight.setPower(br);

        long start = System.currentTimeMillis();
        while (opModeIsActive() && (System.currentTimeMillis() - start) < durationMs) {
            idle();
        }

        setAllDrivePower(0.0);
    }

    private void setAllDrivePower(double p) {
        frontLeft.setPower(p);
        frontRight.setPower(p);
        backLeft.setPower(p);
        backRight.setPower(p);
    }

    private void waitMillis(long ms) {
        long start = System.currentTimeMillis();
        while (opModeIsActive() && (System.currentTimeMillis() - start) < ms) {
            idle();
        }
    }
}
