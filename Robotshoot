package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@TeleOp(name="Simple Shooter OpMode", group="Iterative OpMode")
public class SimpleShooterOpMode extends OpMode {

    // Declare OpMode members.
    private DcMotor shooterMotor = null;

    /*
     * Code to run ONCE when the driver hits INIT
     */
    @Override
    public void init() {
        telemetry.addData("Status", "Initialized");

        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step of the FTC Robot Controller app.
        shooterMotor = hardwareMap.get(DcMotor.class, "shooter_motor"); // "shooter_motor" is the name in your config

        // Most robots need the motors to be reversed. You will need to determine which motor to reverse.
        shooterMotor.setDirection(DcMotorSimple.Direction.FORWARD); // Or REVERSE depending on your setup

        // Set the motor to brake or float when power is zero
        shooterMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE); // Or COAST

        telemetry.addData("Status", "Hardware Initialized");
    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {
    }

    /*
     * Code to run ONCE when the driver hits PLAY
     */
    @Override
    public void start() {
        telemetry.addData("Status", "Started");
    }

    /*
     * Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP
     */
    @Override
    public void loop() {
        // Control the shooter motor with a gamepad button (e.g., gamepad1.a)
        if (gamepad1.a) {
            // Set shooter motor to full power (or a desired speed)
            shooterMotor.setPower(1.0); // Adjust this value (0.0 to 1.0) for desired speed
            telemetry.addData("Shooter", "ON");
        } else {
            // Stop the shooter motor
            shooterMotor.setPower(0.0);
            telemetry.addData("Shooter", "OFF");
        }

        // Update telemetry
        telemetry.addData("Shooter Power", shooterMotor.getPower());
        telemetry.update();
    }

    /*
     * Code to run ONCE after the driver hits STOP
     */
    @Override
    public void stop() {
        telemetry.addData("Status", "Stopped");
        // Ensure the shooter motor is off when the OpMode stops
        if (shooterMotor != null) {
            shooterMotor.setPower(0.0);
        }
    }
}
